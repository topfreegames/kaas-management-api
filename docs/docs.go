// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/clusters/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Return a list of clusters with their information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "List clusters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ClusterList"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.ClientErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.ClientErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterName}/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get cluster by the full name and show its configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Get a cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Cluster"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.ClientErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.ClientErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterName}/nodegroup/{nodeGroupName}/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Shows the information about a node group of a cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "Get a specific node group from a cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Node Group Name",
                        "name": "nodeGroupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.NodeGroup"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.ClientErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.ClientErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/clusters/{clusterName}/nodegroups/": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "List all node groups of a specific cluster with each Node Group information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cluster"
                ],
                "summary": "List node groups from a cluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cluster Name",
                        "name": "clusterName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.NodeGroupList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.ClientErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "error.ClientErrorResponse": {
            "type": "object",
            "properties": {
                "errorcode": {
                    "type": "integer"
                },
                "errormessage": {
                    "type": "string"
                },
                "errortype": {
                    "type": "string"
                },
                "httpcode": {
                    "type": "integer"
                }
            }
        },
        "v1.Cluster": {
            "type": "object",
            "properties": {
                "apiserver": {
                    "type": "string"
                },
                "infrastructureprovider": {
                    "type": "string"
                },
                "kubeprovider": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v1.ClusterList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Cluster"
                    }
                }
            }
        },
        "v1.Metadata": {
            "type": "object",
            "properties": {
                "cluster": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "machinetype": {
                    "type": "string"
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeGroup": {
            "type": "object",
            "properties": {
                "infrastructureprovider": {
                    "type": "string"
                },
                "kubeprovider": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.Metadata"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v1.NodeGroupList": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeGroup"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
